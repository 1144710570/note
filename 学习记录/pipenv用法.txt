代替pip的神器，用之前首先忘记pip这个东西
首先安装：pip install pipenv

创建虚拟环境：
创建一个文件夹，进入该文件夹,创建环境pipenv install
然后发现文件夹下多了Pipfile 和Pipfile.lock文件，代表创建了虚拟环境
激活虚拟环境：pipenv shell
退出虚拟环境：exit


安装和卸载第三方库：
pipenv install xxx
pipenv uninstall xxx

管理开发环境
通常有一些Python包只在你的开发环境中需要，而不是在生产环境中，例如单元测试包。 Pipenv使用--dev标志区分两个环境(开发和生产)。

pipenv install --dev django
django库现在将只在开发虚拟环境中使用。如果要在你的生产环境中使用下面命令安装已有的项目：

pipenv install
该命令执行后项目中并不会安装django包。另外，如果开发人员将你的项目克隆到自己的开发环境中，他们可以使用--dev标志，将django也安装：

pipenv install --dev
也就是说一个--dev参数，帮你在同一个虚拟环境中又区分出了开发和非开发环境。

运行脚本：
pipenv run python xxx.py

pipenv 具有下列的选项：

$ pipenv
Usage: pipenv [OPTIONS] COMMAND [ARGS]...

Options:
  --update         更新Pipenv & pip
  --where          显示项目文件所在路径
  --venv           显示虚拟环境实际文件所在路径
  --py             显示虚拟环境Python解释器所在路径
  --envs           显示虚拟环境的选项变量
  --rm             删除虚拟环境
  --bare           最小化输出
  --completion     完整输出
  --man            显示帮助页面
  --three / --two  使用Python 3/2创建虚拟环境（注意本机已安装的Python版本）
  --python TEXT    指定某个Python版本作为虚拟环境的安装源
  --site-packages  附带安装原Python解释器中的第三方库
  --jumbotron      不知道啥玩意....
  --version        版本信息
  -h, --help       帮助信息
pipenv 可使用的命令参数：

Commands:
  check      检查安全漏洞
  graph      显示当前依赖关系图信息
  install    安装虚拟环境或者第三方库
  lock       锁定并生成Pipfile.lock文件
  open       在编辑器中查看一个库
  run        在虚拟环境中运行命令
  shell      进入虚拟环境
  uninstall  卸载一个库
  update     卸载当前所有的包，并安装它们的最新版本